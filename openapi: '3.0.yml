openapi: 3.0.2

info:
  title: User Management API
  description: API for managing user accounts
  version: 1.0.0

servers:
  - url: https://api.example.com/v1

paths:

  /users:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User' 
                  
  /users/profile:
    get:
      summary: Get user by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update user (admin)
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        200:
          description: Success
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
          
  /users/profile/:id:
    get:
      summary: Get own user profile
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
    patch:
      summary: Update own user profile
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'
    delete:
      summary: Delete user (admin)
      tags:
        - User
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
            
          
components:

  schemas:
  
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email: 
          type: string
          format: email
        profilePictureUrl:
          type: string
        hardSkills:
          type: array
          items:
            type: string
        softSkills:
          type: array
          items:
            type: string
              
    UpdateUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        profilePictureUrl:
          type: string
        hardSkills:
          type: array
          items:
            type: string
        softSkills:
          type: array
          items:
            type: string
            
  responses:
  
    NotFound:
      description: Resource not found
    
    Unauthorized:
      description: Unauthorized
    
    Forbidden:
      description: Forbidden
      
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT